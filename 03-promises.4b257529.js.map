{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,aAAcF,SAASC,cAAc,uBACrCE,YAAaH,SAASC,cAAc,sBACpCG,cAAeJ,SAASC,cAAc,yBAuBxC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAACN,E,MAAUC,IAGnBM,EAAO,C,SAACP,E,MAASC,GAAO,GAGzBA,EAAM,G,CAhCbT,EAAKC,OAAOgB,iBAAiB,UAAUC,IACrCA,EAAMC,iBACN,IAAIC,EAAaC,OAAOrB,EAAKI,aAAakB,OAC1C,MAAMC,EAAYF,OAAOrB,EAAKK,YAAYiB,OACpCE,EAAcH,OAAOrB,EAAKM,cAAcgB,OAE9C,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrClB,EAAekB,EAAGL,GACjBM,MAAK,EAAClB,SAACA,EAAQC,MAAEA,MAChBX,EAAA6B,OAAOC,QAAQ,aAAapB,aAAoBC,OAChDoB,QAAQC,IAAI,aAAatB,aAAoBC,MAAU,IAExDsB,OAAM,EAACvB,SAACA,EAAQC,MAAEA,MACjBX,EAAA6B,OAAOK,QAAQ,YAAYxB,aAAoBC,OAC/CoB,QAAQC,IAAI,YAAYtB,aAAoBC,MAAU,IAE1DW,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputDelayEl: document.querySelector('input[name = delay]'),\n  inputStepEl: document.querySelector('input[name = step]'),\n  inputAmountEl: document.querySelector('input[name = amount]'),\n}\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n  let delayValue = Number(refs.inputDelayEl.value);\n  const stepValue = Number(refs.inputStepEl.value);\n  const amountValue = Number(refs.inputAmountEl.value);\n  \n  for (let i = 1; i <= amountValue; i += 1){\n    createPromise (i, delayValue)\n    .then(({position, delay})=>{\n      Notify.success(`Fulfilled ${position} promise ${delay}ms`);\n      console.log(`Fulfilled ${position} promise ${delay}ms`);    \n    })\n    .catch(({position, delay})=>{\n      Notify.failure(`Rejected ${position} promise ${delay}ms`);\n      console.log(`Rejected ${position} promise ${delay}ms`);\n    });\n  delayValue += stepValue;\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n      if (shouldResolve) {\n        resolve({position, delay});\n        // Fulfill\n      } else {\n        reject({position,delay});\n        // Reject\n      }\n    }, delay);\n  });\n};\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","inputDelayEl","inputStepEl","inputAmountEl","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayValue","Number","value","stepValue","amountValue","i","then","Notify","success","console","log","catch","failure"],"version":3,"file":"03-promises.4b257529.js.map"}