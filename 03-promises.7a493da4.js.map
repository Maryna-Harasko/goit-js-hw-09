{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,aAAcF,SAASC,cAAc,uBACrCE,YAAaH,SAASC,cAAc,sBACpCG,cAAeJ,SAASC,cAAc,yBAuBxC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAACN,WAAUC,UAGnBM,EAAO,CAACP,WAASC,S,GAGlBA,E,IAhCPT,EAAKC,OAAOgB,iBAAiB,UAAU,SAAAC,GACrCA,EAAMC,iBAKN,IAJA,IAAIC,EAAaC,OAAOrB,EAAKI,aAAakB,OACpCC,EAAYF,OAAOrB,EAAKK,YAAYiB,OACpCE,EAAcH,OAAOrB,EAAKM,cAAcgB,OAErCG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EACrClB,EAAekB,EAAGL,GACjBM,MAAK,SAAAC,G,IAAEnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAChBX,EAAA8B,OAAOC,QAAQ,aAAiCC,OAApBtB,EAAS,aAAiBsB,OAANrB,EAAM,OACtDsB,QAAQC,IAAI,aAAiCF,OAApBtB,EAAS,aAAiBsB,OAANrB,EAAM,M,IAEpDwB,OAAM,SAAAN,G,IAAEnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjBX,EAAA8B,OAAOM,QAAQ,YAAgCJ,OAApBtB,EAAS,aAAiBsB,OAANrB,EAAM,OACrDsB,QAAQC,IAAI,YAAgCF,OAApBtB,EAAS,aAAiBsB,OAANrB,EAAM,M,IAEtDW,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  inputDelayEl: document.querySelector('input[name = delay]'),\n  inputStepEl: document.querySelector('input[name = step]'),\n  inputAmountEl: document.querySelector('input[name = amount]'),\n}\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n  let delayValue = Number(refs.inputDelayEl.value);\n  const stepValue = Number(refs.inputStepEl.value);\n  const amountValue = Number(refs.inputAmountEl.value);\n  \n  for (let i = 1; i <= amountValue; i += 1){\n    createPromise (i, delayValue)\n    .then(({position, delay})=>{\n      Notify.success(`Fulfilled ${position} promise ${delay}ms`);\n      console.log(`Fulfilled ${position} promise ${delay}ms`);    \n    })\n    .catch(({position, delay})=>{\n      Notify.failure(`Rejected ${position} promise ${delay}ms`);\n      console.log(`Rejected ${position} promise ${delay}ms`);\n    });\n  delayValue += stepValue;\n  }\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject)=>{\n    setTimeout(()=>{\n      if (shouldResolve) {\n        resolve({position, delay});\n        // Fulfill\n      } else {\n        reject({position,delay});\n        // Reject\n      }\n    }, delay);\n  });\n};\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","inputDelayEl","inputStepEl","inputAmountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delayValue","Number","value","stepValue","amountValue","i","then","param","Notify","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.7a493da4.js.map"}